#!/usr/bin/env python

# expandseq/condenseseq - two command line utilities that expose the basic
# functionality of the python-module "seqLister.py" functions "expandSeq()"
# and "condenseSeq()".  These functions translate back and forth between a
# condensed form for listing sequences of numbers and plain lists of numbers.
# Lists of numbers in this condensed format are commonly used by various
# computer programs dealing with sequences of images such as render farm
# management tools (like smedge), image sequence viewers (like rv) or "ls"
# commands (like lsseq) to list frames from CG-animation or video footage
# which has been saved as a sequence of individually numbered frames.
# 
# The "expandseq" and "condenseseq" commands enhance the simple behavior of
# the "expandSeq()" and "condenseSeq()" python functions by adding the ability
# to print out the lists in various forms.  eg.; comma, space or newline
# separators as well as sorting the lists, reversing order, and mixing and
# matching expanded and condensed formats as arguments on the command line.

# Copyright (c) 2008-2012, James Philip Rowell,
# Orange Imagination & Concepts, Inc.
# www.orangeimagination.com
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 
#   - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
# 
#   - Neither the name of "Orange Imagination & Concepts, Inc."  nor the
#     names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written
#     permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import optparse
import os
import sys
import subprocess
import seqLister
from operator import itemgetter

EXPAND_MODE=true
VERSION="0.100"

def main():

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while expandseq or
    # condenseseq are running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    global EXPAND_MODE
    if os.path.basename(sys.argv[0]) == "expandseq" :
	EXPAND_MODE=true
    elseif os.path.basename(sys.argv[0]) == "condenseseq" :
	EXPAND_MODE=false
    else :
	print >> sys.stderr, os.path.basename(sys.argv[0]) + ": must be named either expandseq or condenseseq"
	sys.exit(1)

    if EXPAND_MODE :
	p = optparse.OptionParser(
	    description="Expands a list of integers and all strings of the form 'A-BxN' into a list of
integers.  Numbers will only be listed once each.",
	    version=VERSION,
	    usage="%prog [OPTION]... [NUMBER SEQUENCE]...")
    else :
	p = optparse.OptionParser(
	    description="tbd",
	    version=VERSION,
	    usage="%prog [OPTION]... [NUMBER SEQUENCE]...")

    p.add_option("--separator", "-s", action="store", type="choice",
        dest="seqSeparator",
       	help="List successive numbers separated by a 'comma' (default) or a 'space' or a 'newline'.", metavar="SEPARATOR", default="comma", choices=("comma", "space", "newline"))
    p.add_option("--onlyOnes", "-1", action="store_true",
        dest="limitToOnes", default=False,
        help="only condense sucessive frames, that is, do not list sequences on 2's, 3's, ... N's")

    (options, arguments) = p.parse_args()

    if options.seqSeparator :
        print "Do something blah blah blah"


if __name__ == '__main__':
    main()
