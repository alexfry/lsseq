#!/usr/bin/env python

# expandseq/condenseseq - two command line utilities that expose the basic
# functionality of the python-module "seqLister.py" functions "expandSeq()"
# and "condenseSeq()".  These functions translate back and forth between a
# condensed form for listing sequences of numbers and plain lists of numbers.
# Lists of numbers in this condensed format are commonly used by various
# computer programs dealing with sequences of images such as render farm
# management tools (like smedge), image sequence viewers (like rv) or "ls"
# commands (like lsseq) to list frames from CG-animation or video footage
# which has been saved as a sequence of individually numbered frames.
# 
# The "expandseq" and "condenseseq" commands enhance the simple behavior of
# the "expandSeq()" and "condenseSeq()" python functions by adding the ability
# to print out the lists in various forms.  eg.; comma, space or newline
# separators as well as sorting the lists, reversing order, and mixing and
# matching expanded and condensed formats as arguments on the command line.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 
#   - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
# 
#   - Neither the name of "Orange Imagination & Concepts, Inc."  nor the
#     names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written
#     permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import optparse
import os
import sys
import subprocess
import seqLister
from operator import itemgetter

def main():

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while seqlist is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    global IMAGE_EXT
    global MOV_EXT

    p = optparse.OptionParser(
        description="tbd",
        version="0.100",
        usage="%prog [OPTION]... [NUMBER SEQUENCE]...")

    p.add_option("--single", "-1", action="store_true",
        dest="singleColumn", default=False,
        help="list one non-image file per line")
    p.add_option("--all", "-a", action="store_false",
        dest="ignoreDotFiles", default=True,
        help="do not ignore entries starting with .")
    p.add_option("--combineLists", "-C", action="store_true",
        dest="combineErrorFrames", default=False,
        help="Combine the lists of zero, missing and bad frames into one list.")
    p.add_option("--directory", "-d", action="store_false",
        dest="listDirContents", default=True,
        help="list directory entries instead of contents, and do not dereference symbolic links")
    p.add_option("--extremes", "-e", action="store_true",
        dest="extremes", default=False,
        help="only list the first and last image on a separate line.  This option implies --prependPathAbs, --onlyImages, --skipMissing and --skipZero.  The purpose of this option is to help in backing up image sequences - making it easy to get a list of only the first and last frame for each sequence.")
    p.add_option("--classify", "-F", action="store_true",
        dest="classify", default=False,
        help="append indicator (one of */=>@|) to entries")
    p.add_option("--imgExt", "-i", action="store_true",
        dest="printImgExtensions", default=False,
        help="print list of raster and movie file extensions and exit")
    p.add_option("--showMissing", "-m", action="store_true",
        dest="showMissing", default=True,
        help="show list of missing frames [default]" )
    p.add_option("--skipMissing", "-M", action="store_false",
        dest="showMissing",
        help="do not show list of missing frames" )
    p.add_option("--nuke", "-n", action="store_true",
        dest="nukeCmd", default=False,
        help="list image sequences as nuke viewer command lines (takes precedence over --shake option)")
    p.add_option("--onlyImages", "-o", action="store_true",
        dest="onlyImages", default=False,
        help="only list image sequences")
    p.add_option("--prependPathAbs", "-p", action="store_true",
        dest="prependPathAbs", default=False,
        help="prepend the absolute path name to the image name. This option implies the option --onlyImages and will also suppress printing directory name headers when listing directory contents.")
    p.add_option("--prependPathRel", "-P", action="store_true",
        dest="prependPathRel", default=False,
        help="prepend the relative path name to the image name. This option implies the option --onlyImages and will also suppress printing directory name headers when listing directory contents.")
    p.add_option("--rv", action="store_true",
        dest="rvCmd", default=False,
        help="list image sequences as arguments suitable for the rv viewer (this takes precedence over the --nuke and --shake options).")
    p.add_option("--reverse", "-r", action="store_true",
        dest="reverseListing", default=False,
        help="reverse order while sorting")
    p.add_option("--recursive", "-R", action="store_true",
        dest="isRecursive", default=False,
        help="list subdirectories recursively")
    p.add_option("--shake", "-s", action="store_true",
        dest="shakeCmd", default=False,
        help="list image sequences as shake viewer command lines")
    p.add_option("--time", action="store", type="choice",
        dest="timeCompare",
       	help="Which frame in the sequence to use to compare times between sequences when sorting by time.  The possible values for 'FRAME_AGE' are 'oldest', 'median' and 'newest' (which is the default).", metavar="FRAME_AGE", default="newest", choices=("oldest", "median", "newest"))
    p.add_option("-t", action="store_true",
        dest="sortByMTime", default=False,
        help="sort by modification time, the default comparison time is between the most recently modified (newest) frames in each sequence. (see --time).")
    p.add_option("--showZero", "-z", action="store_true",
        dest="showZero", default=True,
        help="show list of zero length images [default]" )
    p.add_option("--skipZero", "-Z", action="store_false",
        dest="showZero",
        help="do not show list of zero length images" )

    (options, arguments) = p.parse_args()

    tmpExt = os.getenv("OIC_IMAGE_EXTENSION")
    if tmpExt != None and tmpExt != "" :
        IMAGE_EXT = tmpExt.split(":")

    tmpExt = os.getenv("OIC_MOV_EXTENSION")
    if tmpExt != None and tmpExt != "" :
        MOV_EXT = tmpExt.split(":")

    if options.printImgExtensions :
        print "Image extensions:", IMAGE_EXT
        print "Movie extensions:", MOV_EXT
        sys.exit(0)

    if options.extremes :
        options.prependPathAbs = True
        options.prependPathRel = False
        options.showMissing = False
        options.showZero = False
        options.shakeCmd = False
        options.nukeCmd = False
        options.rvCmd = False

    if options.nukeCmd :
        options.shakeCmd = False

    if options.rvCmd :
        options.shakeCmd = False
        options.nukeCmd = False

    if options.prependPathRel :
        options.onlyImages = True # Force this.

    if options.prependPathAbs :
        options.onlyImages = True # Force this.
        options.prependPathRel = False

    # The following logic attempts to mimic the behavior
    # of /bin/ls as well as possible.

    # No args means list the current directory.
    #
    if len(arguments) == 0:
        if (not options.listDirContents) :
            if (not options.onlyImages) :
                print "."
        else :
            if options.isRecursive :
                if not options.prependPathAbs :
                    print ".:"
                passedPath = "./"
            else :
                passedPath = ""
            if options.prependPathAbs :
                passedPath = os.getcwd() + "/"

            listSeqDir(stripDotFiles(os.listdir("."), options.ignoreDotFiles), "", False, options, passedPath)

    # We are being asked to list a specific directory, so we don't need
    # to print the directory name before listing the contents (unless
    # it is a recursive listing).  (/bin/ls behavior.)
    #
    elif len(arguments) == 1 and os.path.isdir(arguments[0]) :
        arg0 = arguments[0]
        # Strip out trailing "/" that may have been tacked on by
        # file completion.  (/bin/ls does not do this - but it's
        # cleaner looking.)
        if arguments[0][-1] == "/" :
            arg0 = arguments[0][:-1]
        if (not options.listDirContents) :
            print arg0
        else :
            if options.isRecursive:
                if not (options.prependPathAbs or options.prependPathRel) :
                    print arg0 + ":"
                passedPath = arg0 + "/"
            else :
                passedPath = ""
            if options.prependPathRel :
                passedPath = arg0 + "/"
            if options.prependPathAbs :
                passedPath = os.getcwd() + "/"

            listSeqDir(stripDotFiles(os.listdir(arg0), options.ignoreDotFiles), arg0, False, options, passedPath)

    # List all the arguments on the command line and unless prevented by
    # the "-d" option, it will also list the contents of all the directories
    # entered on the command line as well.
    #
    else:
        passedPath = ""
        if options.prependPathAbs :
            passedPath = os.getcwd() + "/"
        listSeqDir(arguments, "", True, options, passedPath)

if __name__ == '__main__':
    main()
