#!/usr/bin/env python
import optparse
import os
import subprocess

imageExt = ["alpha", "als", "anim", "bmp", "btf", "bw", "cin",
    "dib", "epdf", "exr", "gfa", "gif", "giff", "icon", "iff", "img",
    "int", "inta", "jpe", "jpeg", "jpg", "mask", "matte", "pct",
    "pct1", "pct2", "pdb", "pdd", "pdf", "pic", "pict", "pix", "png",
    "psb", "psd", "raw", "rgb", "rgba", "rle", "rw2", "sgi", "tga",
    "tif", "tiff", "tpic"]

# Return two components if file is formatted such that it is 
# part of image file sequence otherwise return an empty list.
# The two returned components are the full filename but missing
# the frame number, and the frame number.
#     Eg.  "a.001.exr" -> ["a.exr", "001"]
#
def seqSplit(filename) :

    fileComponents = filename.split(".")

    if len(fileComponents) > 2 \
	    and imageExt.count(fileComponents[-1]) >= 1 \
	    and fileComponents[-2].isdigit() :

	fileExt = fileComponents[-1]
	fileFrameNum = fileComponents[-2]
	fileComponents.remove(fileFrameNum)
	fileKey = ".".join(fileComponents)
	return [fileKey, fileFrameNum]
    else :
	return []

def printSeq(filename, frameList, options) :

    fileComponents = filename.split(".")
    missingFrames = []
    minFrame = frameList[1][0]
    maxFrame = frameList[1][-1]
    i = minFrame
    while i <= maxFrame:
	if i != frameList[1][0] :
	    missingFrames.append(i)
	else :
	    frameList[1].pop(0)
	i = i + 1
    frameRange = "[" + str(minFrame) + "-" + str(maxFrame) + "]"
    fileComponents = fileComponents[:-1] + [frameRange] + [fileComponents[-1]]
    print ".".join(fileComponents),
    if (options.showMissing and len(missingFrames) > 0) :
	print missingFrames,
    print ""

def listSeqDir(dirContents, listSubDirs, options):
    imageDictionary = {}
    otherFiles = []
    dirList = []
    for filename in dirContents:
	fileParts = seqSplit(filename)
	if len(fileParts) == 2 :
	    if imageDictionary.has_key(fileParts[0]) :
		imageDictionary[fileParts[0]][1].append(int(fileParts[1]))
		if (len(fileParts[1]) < imageDictionary[fileParts[0]][0]) :
		    imageDictionary[fileParts[0]][0] = len(fileParts[1])
	    else :
		imageDictionary[fileParts[0]] \
		    = [len(fileParts[1]), [int(fileParts[1])]]
	else :
	    otherFiles.append(filename)
	    if os.path.isdir(filename) :
		dirList.append(filename)

    imKeys = imageDictionary.keys()
    imKeys.sort()
    for k in imKeys :
	imageDictionary[k][1].sort()
	# print k, "padding: ", imageDictionary[k][0], imageDictionary[k][1]
	# print imageDictionary[k]
	printSeq(k, imageDictionary[k], options)

    otherFiles.sort()
    dirList.sort()
    if len(otherFiles) > 0 :
	lsCmd = ["ls", "-d"] + otherFiles
	subprocess.call(lsCmd)


def main():

    p = optparse.OptionParser(
	description="List directory contents while compressing images sequences to one entry each.\nFilenames that are part of images sequences are assumed to be of the form\n<descriptiveName>.<frameNum>.<imgExtention>",
	version="0.102",
	usage="%prog [OPTION]... [FILE]...")
    p.add_option("--directory", "-d", action="store_false",
	dest="listDirContents", default=True,
	help="list directory entries instead of contents, and do not dereference symbolic links")
    p.add_option("--showMissing", "-m", action="store_true",
	dest="showMissing", default=True,
	help="show list of missing frames [default]" )
    p.add_option("--skipMissing", "-M", action="store_false",
	dest="showMissing",
	help="do not show list of missing frames" )
    p.add_option("--showZero", "-z", action="store_true",
	dest="showZero", default=True,
	help="show list of zero length images [default]" )
    p.add_option("--skipZero", "-Z", action="store_false",
	dest="showZero",
	help="do not show list of zero length images" )
    p.add_option("--onlyImages", "-o", action="store_true",
	dest="onlyImages", default=False,
	help="only list image sequences")
    # p.add_option("--imageList", "-i", action="store", type="string",
	# dest="imageList", metavar="FILE",
	# help="file containing list of raster image extentions")
    # p.add_option("--printImages", "-P", action="store_false",
	# dest="printImages",
	# help="print list of raster file image extensions and exit")
    # ***Change the next two to be a list [default, shake, nuke]
    # p.add_option("--nukeFormat", "-n", action="store_true",
	# dest="nukeFormat", default="False",
	# help="list images sequences in format suitable for nuke FileIn node")
    # p.add_option("--shakeFormat", "-s", action="store_true",
	# dest="shakeFormat", default="False",
	# help="list images sequences in format suitable for shake FileIn node")
    p.add_option("--recursive", "-R", action="store_false",
	dest="isRecursive", default=False,
	help="list subdirectories recursively")

    (options, arguments) = p.parse_args()

    # No args means list the current directory.
    #
    if len(arguments) == 0:
	if (not options.listDirContents) :
	    if (not options.onlyImages) :
		print "."
	else :
	    listSeqDir(os.listdir("."), False, options)
    else:
	listSeqDir(arguments, True, options)

if __name__ == '__main__':
    main()
