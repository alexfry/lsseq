#!/bin/bash

# For now execute this script in the git lsseq repo directory for this to work.

tmpArgs=/tmp/tmpTEST_LSSEQ.$$
OIC_REPO_DIR=`pwd`

cleanup() {
    /bin/rm $tmpArgs  > /dev/null 2>&1
    exit 0
}

trap cleanup INT

cat << EOF > $tmpArgs
. -lRFC testdir
. -lReC testdir
. -lReoC testdir
. -RePC testdir
testdir
testdir *
testdir *
testdir/cdir
testdir/cdir .
testdir/cdir *
testdir/cdir -d *
testdir/cdir -c
testdir/cdir -e -R
testdir/cdir -e -R -P
testdir/cdir -fnative
testdir/cdir -fnuke
testdir/cdir -fshake
testdir/cdir -frv
testdir/cdir -fglob
testdir/cdir -i
testdir/cdir -M
testdir/cdir -o
testdir/cdir -p *
testdir/cdir -P *
testdir/cdir -r
testdir/cdir -t
testdir/cdir -t --time oldest
testdir/cdir -t --time median
testdir/cdir -Z
testdir/cdir -R $OIC_REPO_DIR/testdir/cdir/ $OIC_REPO_DIR/testdir/
testdir/cdir -R $OIC_REPO_DIR/testdir/cdir/
EOF

echo ------ Begin Tests ------ > $OIC_REPO_DIR/test_lsseq.out.new

i=1
while true; do
    declare -a args=(`sed -n -e "$i p" $tmpArgs`)
    if [ ${#args[@]} -eq 0 ]; then
	break;
    fi
    workingDir=${args[0]}
    args=(${args[@]:1})
    echo "" >> $OIC_REPO_DIR/test_lsseq.out.new
    echo ------ Test $i ------
    echo ------ Test $i ------ lsseq ${args[@]} ------ >> $OIC_REPO_DIR/test_lsseq.out.new
    cd $OIC_REPO_DIR/$workingDir
    $OIC_REPO_DIR/lsseq ${args[@]} >> $OIC_REPO_DIR/test_lsseq.out.new
    i=$(expr $i + 1)
done

sed -e "1,$ s-$OIC_REPO_DIR-/nas/media/src/python/lsseq-" < $OIC_REPO_DIR/test_lsseq.out.new > /tmp/tmp$$
/bin/mv /tmp/tmp$$ $OIC_REPO_DIR/test_lsseq.out.new
